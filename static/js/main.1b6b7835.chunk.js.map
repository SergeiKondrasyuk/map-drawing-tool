{"version":3,"sources":["Redux/mapReducer.js","React/Panel.js","React/SVG.js","React/Map.js","App.js","serviceWorker.js","Redux/redux-store.js","index.js"],"names":["initialState","mapSize","circle","center","x","y","radius","polygon","points","getCircleArea","state","Math","PI","map","getPolygonArea","s","i1","length","i2","getInterArea","w","width","h","height","intersectionsPixels","i","j","pointInCircle","insidePoly","poly","pointX","pointY","inside","cx","cy","mapReducer","action","type","r","payload","connect","circleArea","polygonArea","interArea","clearCircle","clearPolygon","props","className","onClick","drawMode","drawModes","SET_CIRCLE_RADIUS","setDrawMode","SET_POLYGON_POINT","SET_CIRCLE_CENTER","OFF","round","setCircleRadius","setCircleCenter","addPolygonPoint","useState","mouseCoords","setMouseCoords","tempPolygonPoint","setTempPolygonPoint","polygonCoords","reduce","acc","el","push","e","clientX","clientY","onMouseMove","sqrt","style","strokeDasharray","join","stopPropagation","fill","fillOpacity","cursor","setMapSize","window","innerWidth","innerHeight","handleResize","useEffect","addEventListener","Boolean","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b6b7835.chunk.js","sourcesContent":["const SET_CIRCLE_CENTER = 'SET_CIRCLE_CENTER';\r\nconst SET_CIRCLE_RADIUS = 'SET_CIRCLE_RADIUS';\r\nconst ADD_POLYGON_POINT = 'ADD_POLYGON_POINT';\r\nconst SET_MAP_SIZE = 'SET_MAP_SIZE';\r\nconst CLEAR_CIRCLE = 'CLEAR_CIRCLE';\r\nconst CLEAR_POLYGON = 'CLEAR_POLYGON';\r\n\r\nlet initialState = {\r\n    mapSize: {},\r\n    circle: {\r\n        center: {x: 300, y: 300},\r\n        radius: 200,\r\n    },\r\n    polygon: {\r\n        points: [{x: 400, y: 100}, {x: 700, y: 100}, {x: 700, y: 500}, {x: 400, y: 500}],\r\n    }\r\n};\r\n\r\nconst mapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CIRCLE_CENTER :\r\n            return {...state, circle: {...state.circle, center: {x: action.x, y: action.y}}};\r\n        case SET_CIRCLE_RADIUS :\r\n            return {...state, circle: {...state.circle, radius: action.r}};\r\n        case ADD_POLYGON_POINT :\r\n            return {...state, polygon: {...state.polygon, points: [...state.polygon.points, action.payload]}};\r\n        case CLEAR_POLYGON :\r\n            return {...state, polygon: {...state.polygon, points: []}};\r\n        case CLEAR_CIRCLE :\r\n            return {...state, circle: {...state.circle, radius: 0}};\r\n        case SET_MAP_SIZE :{\r\n            debugger\r\n            return {...state, mapSize: action.payload};}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setCircleCenter = (x, y) => ({type: SET_CIRCLE_CENTER, x, y});\r\nexport const setCircleRadius = (r) => ({type: SET_CIRCLE_RADIUS, r});\r\nexport const addPolygonPoint = (payload) => ({type: ADD_POLYGON_POINT, payload});\r\nexport const clearPolygon = () => ({type: CLEAR_POLYGON});\r\nexport const clearCircle = () => ({type: CLEAR_CIRCLE});\r\nexport const setMapSize = (payload) => ({type: SET_MAP_SIZE, payload});\r\n\r\n\r\nexport const getCircleArea = (state) => {\r\n    return Math.PI * state.map.circle.radius ** 2\r\n};\r\nexport const getPolygonArea = (state) => {\r\n    let points = state.map.polygon.points;\r\n    let s = 0;\r\n    for (let i1 = 0; i1 < points.length; i1++) {\r\n        let i2 = (i1 + 1) % points.length;\r\n        s += (points[i1].x + points[i2].x) * (points[i1].y - points[i2].y);\r\n    }\r\n    return s < 0 ? -s / 2 : s / 2;\r\n};\r\n\r\nexport const getInterArea = (state) => {\r\n    let w = state.map.mapSize.width;\r\n    let h = state.map.mapSize.height;\r\n\r\n    let intersectionsPixels = 0;\r\n    let {circle} = state.map;\r\n    for (let i = 0; i < w - 1; i++) {\r\n        for (let j = 0; j < h - 1; j++) {\r\n            let insideCircle = pointInCircle(i, j, circle.center.x, circle.center.y, circle.radius);\r\n            if (!insideCircle) continue;\r\n\r\n            let insidePolyResult = insidePoly(state.map.polygon.points, i, j);\r\n            if (insidePolyResult) intersectionsPixels++;\r\n        }\r\n    }\r\n\r\n    return intersectionsPixels;\r\n};\r\n\r\nlet insidePoly = (poly, pointX, pointY) => {\r\n    let i, j;\r\n    let inside = false;\r\n    for (i = 0, j = poly.length - 1; i < poly.length; j = i++) {\r\n        if (((poly[i].y > pointY) !== (poly[j].y > pointY)) && (pointX < (poly[j].x - poly[i].x) * (pointY - poly[i].y) /\r\n            (poly[j].y - poly[i].y) + poly[i].x)) inside = !inside;\r\n    }\r\n    return inside;\r\n};\r\n\r\n// x,y is the point to test\r\n// cx, cy is circle center, and radius is circle radius\r\nlet pointInCircle = (x, y, cx, cy, radius) => {\r\n    let distanceSquared = (x - cx) * (x - cx) + (y - cy) * (y - cy);\r\n    return distanceSquared <= radius * radius;\r\n};\r\n\r\nexport default mapReducer;","import React from \"react\";\r\nimport {clearCircle, clearPolygon, getCircleArea, getInterArea, getPolygonArea,} from \"../Redux/mapReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Panel = (props) => {\r\n\r\n    const onCircleDrawClick = () => {\r\n        props.drawMode === props.drawModes.SET_POLYGON_POINT && props.clearPolygon();\r\n        props.clearCircle();\r\n        props.setDrawMode(props.drawModes.SET_CIRCLE_CENTER);\r\n    };\r\n\r\n    const onPolygonDrawClick = () => {\r\n        props.drawMode === props.drawModes.SET_CIRCLE_RADIUS && props.clearCircle();\r\n        props.clearPolygon();\r\n        props.setDrawMode(props.drawModes.SET_POLYGON_POINT);\r\n    };\r\n\r\n    const onClearClick = () => {\r\n        props.setDrawMode(props.drawModes.OFF);\r\n        props.clearPolygon();\r\n        props.clearCircle();\r\n    };\r\n\r\n    return (\r\n        <div className='panel'>\r\n            <div className='buttons'>\r\n                <div>\r\n                    <button onClick={onPolygonDrawClick}>Draw polygon</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onCircleDrawClick}>Draw Circle</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onClearClick}>Clear field</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='area'>\r\n                <div>Circle area: <div>{Math.round(props.circleArea)}px</div></div>\r\n                <div>Polygon area: <div>{Math.round(props.polygonArea)}px</div></div>\r\n                <div>Common area: <div>{props.interArea}px</div></div>\r\n            </div>\r\n        </div>)\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        circleArea: getCircleArea(state),\r\n        polygonArea: getPolygonArea(state),\r\n        interArea: getInterArea(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {clearCircle, clearPolygon})(Panel);","import React, {useState} from \"react\";\r\nimport {addPolygonPoint, setCircleCenter, setCircleRadius,} from \"../Redux/mapReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst SVG = (props) => {\r\n\r\n    const [mouseCoords, setMouseCoords] = useState({x: 0, y: 0});\r\n    const [tempPolygonPoint, setTempPolygonPoint] = useState({x: 0, y: 0});\r\n\r\n    let polygonCoords = props.polygon.points.reduce((acc, el) => {\r\n        acc.push(`${el.x},${el.y}`);\r\n        return acc;\r\n    }, []);\r\n\r\n    if (props.drawMode === props.drawModes.SET_POLYGON_POINT) {\r\n        polygonCoords.push(`${tempPolygonPoint.x},${tempPolygonPoint.y}`);\r\n    }\r\n\r\n    const onMouseMove = (e) => {\r\n        setMouseCoords({x: e.clientX, y: e.clientY});\r\n        if (props.drawMode === props.drawModes.SET_CIRCLE_RADIUS) {\r\n            let x = props.circle.center.x;\r\n            let y = props.circle.center.y;\r\n            const radius = Math.sqrt((mouseCoords.x - x) ** 2 + (mouseCoords.y - y) ** 2);\r\n            props.setCircleRadius(radius);\r\n        } else if (props.drawMode === props.drawModes.SET_POLYGON_POINT) {\r\n            setTempPolygonPoint({x: e.clientX, y: e.clientY})\r\n        }\r\n    };\r\n\r\n    const onMapClick = (e) => {\r\n        switch (props.drawMode) {\r\n            case props.drawModes.SET_CIRCLE_CENTER: {\r\n                props.setCircleCenter(e.clientX, e.clientY);\r\n                props.setDrawMode(props.drawModes.SET_CIRCLE_RADIUS);\r\n                break\r\n            }\r\n            case props.drawModes.SET_CIRCLE_RADIUS: {\r\n                props.setDrawMode(props.drawModes.OFF);\r\n                break\r\n            }\r\n            case props.drawModes.SET_POLYGON_POINT: {\r\n                props.addPolygonPoint({x: e.clientX, y: e.clientY});\r\n                break\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const stopDrawing = (e) => {\r\n        e.stopPropagation();\r\n        props.setDrawMode(props.drawModes.OFF);\r\n    };\r\n\r\n    return (\r\n        <svg width={`${props.mapSize.width}px`} height={`${props.mapSize.height-4}px`} onClick={onMapClick}\r\n             onMouseMove={onMouseMove}>\r\n\r\n            <circle className='circle' cx={props.circle.center.x} cy={props.circle.center.y} r={props.circle.radius}\r\n                    style={{...props.drawMode === props.drawModes.SET_CIRCLE_RADIUS && {strokeDasharray: \"4\"}}}/>\r\n            {props.drawMode === props.drawModes.SET_CIRCLE_RADIUS &&\r\n            <text x={mouseCoords.x + 20} y={mouseCoords.y + 20}>r = {Math.round(props.circle.radius)}</text>}\r\n\r\n            <polygon className='polygon' points={polygonCoords.join(' ')} style={\r\n                {...props.drawMode === props.drawModes.SET_POLYGON_POINT && {strokeDasharray: \"4\"}}}/>\r\n\r\n            {props.polygon.points[2] && props.drawMode === props.drawModes.SET_POLYGON_POINT &&\r\n            <circle onClick={stopDrawing} cx={props.polygon.points[0].x} cy={props.polygon.points[0].y} r={7}\r\n                    style={{fill: \"red\", fillOpacity: \"0.8\", cursor: 'pointer'}}/>}\r\n\r\n        </svg>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        mapSize: state.map.mapSize,\r\n        circle: state.map.circle,\r\n        polygon: state.map.polygon\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {setCircleRadius, setCircleCenter, addPolygonPoint})(SVG);","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Panel from \"./Panel\";\r\nimport SVG from \"./SVG\";\r\n\r\nconst drawModes = {\r\n    OFF: 'OFF',\r\n    SET_CIRCLE_CENTER: 'SET_CIRCLE_CENTER',\r\n    SET_CIRCLE_RADIUS: 'SET_CIRCLE_RADIUS',\r\n    SET_POLYGON_POINT: 'SET_POLYGON_POINT',\r\n};\r\n\r\nfunction Map(props) {\r\n\r\n    const [drawMode, setDrawMode] = useState(drawModes.OFF);\r\n\r\n    return (\r\n        <div className=\"map\" style={{width: `${props.mapSize.width}px`, height: `${props.mapSize.height}px`}}>\r\n\r\n            <Panel drawModes={drawModes} drawMode={drawMode} setDrawMode={setDrawMode}/>\r\n\r\n            <SVG drawModes={drawModes} drawMode={drawMode} setDrawMode={setDrawMode}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        mapSize: state.map.mapSize,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Map);\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Map from \"./React/Map\";\r\nimport {connect} from \"react-redux\";\r\nimport {setMapSize} from \"./Redux/mapReducer\";\r\n\r\nfunction App(props) {\r\n\r\n    props.setMapSize({width: window.innerWidth, height: window.innerHeight});\r\n\r\n    let handleResize = () => {\r\n        debugger\r\n        props.setMapSize({width: window.innerWidth, height: window.innerHeight});\r\n    };\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        window.addEventListener('resize', handleResize);\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Map/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(null, {setMapSize})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {createStore} from \"redux\";\r\nimport {combineReducers} from \"redux/es/redux\";\r\nimport mapReducer from \"./mapReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    map: mapReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Redux/redux-store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}