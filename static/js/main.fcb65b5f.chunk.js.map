{"version":3,"sources":["Redux/mapReducer.js","React/Panel.js","React/SVG.js","React/Map.js","App.js","serviceWorker.js","Redux/redux-store.js","index.js"],"names":["initialState","mapSize","circle","center","x","y","radius","polygon","points","getCircleArea","state","Math","PI","map","getPolygonArea","s","reduce","acc","el","index","array","i2","length","abs","getInterArea","w","width","h","height","intersectionsPixels","i","j","insideCircle","pointInCircle","insidePolyResult","insidePoly","poly","pointX","pointY","inside","forEach","cx","cy","mapReducer","action","type","r","payload","connect","circleArea","polygonArea","interArea","clearCircle","clearPolygon","props","className","onClick","drawMode","drawModes","SET_CIRCLE_RADIUS","setDrawMode","SET_POLYGON_POINT","SET_CIRCLE_CENTER","OFF","round","setCircleRadius","setCircleCenter","addPolygonPoint","useState","mouseCoords","setMouseCoords","tempPolygonPoint","setTempPolygonPoint","polygonCoords","push","e","clientX","clientY","onMouseMove","maxRadius","min","apply","sqrt","style","strokeDasharray","join","stopPropagation","fill","fillOpacity","cursor","setMapSize","window","innerWidth","innerHeight","handleResize","useEffect","addEventListener","Boolean","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcb65b5f.chunk.js","sourcesContent":["const SET_CIRCLE_CENTER = 'SET_CIRCLE_CENTER';\r\nconst SET_CIRCLE_RADIUS = 'SET_CIRCLE_RADIUS';\r\nconst ADD_POLYGON_POINT = 'ADD_POLYGON_POINT';\r\nconst SET_MAP_SIZE = 'SET_MAP_SIZE';\r\nconst CLEAR_CIRCLE = 'CLEAR_CIRCLE';\r\nconst CLEAR_POLYGON = 'CLEAR_POLYGON';\r\n\r\nlet initialState = {\r\n    mapSize: {},\r\n    circle: {\r\n        center: {x: 300, y: 300},\r\n        radius: 200,\r\n    },\r\n    polygon: {\r\n        points: [{x: 400, y: 100}, {x: 700, y: 100}, {x: 700, y: 500}, {x: 400, y: 500}],\r\n    }\r\n};\r\n\r\nconst mapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CIRCLE_CENTER :\r\n            return {...state, circle: {...state.circle, center: {x: action.x, y: action.y}}};\r\n        case SET_CIRCLE_RADIUS :\r\n            return {...state, circle: {...state.circle, radius: action.r}};\r\n        case ADD_POLYGON_POINT :\r\n            return {...state, polygon: {...state.polygon, points: [...state.polygon.points, action.payload]}};\r\n        case CLEAR_POLYGON :\r\n            return {...state, polygon: {...state.polygon, points: []}};\r\n        case CLEAR_CIRCLE :\r\n            return {...state, circle: {...state.circle, radius: 0}};\r\n        case SET_MAP_SIZE : {\r\n            return {...state, mapSize: action.payload};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setCircleCenter = (x, y) => ({type: SET_CIRCLE_CENTER, x, y});\r\nexport const setCircleRadius = (r) => ({type: SET_CIRCLE_RADIUS, r});\r\nexport const addPolygonPoint = (payload) => ({type: ADD_POLYGON_POINT, payload});\r\nexport const clearPolygon = () => ({type: CLEAR_POLYGON});\r\nexport const clearCircle = () => ({type: CLEAR_CIRCLE});\r\nexport const setMapSize = (payload) => ({type: SET_MAP_SIZE, payload});\r\n\r\n\r\nexport const getCircleArea = (state) => {\r\n    return Math.PI * state.map.circle.radius ** 2\r\n};\r\n\r\nexport const getPolygonArea = (state) => {\r\n    let points = state.map.polygon.points;\r\n    let s = points.reduce((acc, el, index, array) => {\r\n        let i2 = (index + 1) % array.length;\r\n        return acc + (el.x + array[i2].x) * (el.y - array[i2].y);\r\n    }, 0);\r\n    return Math.abs(s / 2);\r\n};\r\n\r\nexport const getInterArea = (state) => {\r\n    let w = state.map.mapSize.width;\r\n    let h = state.map.mapSize.height;\r\n    let {circle, polygon} = state.map;\r\n    let intersectionsPixels = 0;\r\n\r\n    for (let i = 0; i < w - 1; i++) {\r\n        for (let j = 0; j < h - 1; j++) {\r\n            let insideCircle = pointInCircle(i, j, circle.center.x, circle.center.y, circle.radius);\r\n            let insidePolyResult = insidePoly(polygon.points, i, j);\r\n            if (insideCircle && insidePolyResult || insideCircle && !insidePolyResult || !insideCircle && insidePolyResult)\r\n                intersectionsPixels++;\r\n        }\r\n    }\r\n\r\n    return intersectionsPixels;\r\n};\r\n\r\nlet insidePoly = (poly, pointX, pointY) => {\r\n    let inside = false;\r\n\r\n    poly.forEach((el, index, array) => {\r\n        let j;\r\n        index !== 0 ? j = index - 1 : j = poly.length - 1;\r\n        if (((array[index].y > pointY) !== (array[j].y > pointY)) && (pointX < (array[j].x - array[index].x) * (pointY - array[index].y) /\r\n            (array[j].y - array[index].y) + array[index].x)) inside = !inside;\r\n    }, 0);\r\n\r\n    return inside;\r\n};\r\n\r\n// x,y is the point to test\r\n// cx, cy is circle center, and radius is circle radius\r\nlet pointInCircle = (x, y, cx, cy, radius) => {\r\n    let distanceSquared = (x - cx) * (x - cx) + (y - cy) * (y - cy);\r\n    return distanceSquared <= radius * radius;\r\n};\r\n\r\nexport default mapReducer;","import React from \"react\";\r\nimport {clearCircle, clearPolygon, getCircleArea, getInterArea, getPolygonArea,} from \"../Redux/mapReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Panel = (props) => {\r\n\r\n    const onCircleDrawClick = () => {\r\n        props.drawMode === props.drawModes.SET_POLYGON_POINT && props.clearPolygon();\r\n        props.clearCircle();\r\n        props.setDrawMode(props.drawModes.SET_CIRCLE_CENTER);\r\n    };\r\n\r\n    const onPolygonDrawClick = () => {\r\n        props.drawMode === props.drawModes.SET_CIRCLE_RADIUS && props.clearCircle();\r\n        props.clearPolygon();\r\n        props.setDrawMode(props.drawModes.SET_POLYGON_POINT);\r\n    };\r\n\r\n    const onClearClick = () => {\r\n        props.setDrawMode(props.drawModes.OFF);\r\n        props.clearPolygon();\r\n        props.clearCircle();\r\n    };\r\n\r\n    return (\r\n        <div className='panel'>\r\n            <div className='buttons'>\r\n                <div>\r\n                    <button onClick={onPolygonDrawClick}>Draw polygon</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onCircleDrawClick}>Draw Circle</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onClearClick}>Clear field</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='area'>\r\n                <div>Circle area: <div>{Math.round(props.circleArea)}px</div></div>\r\n                <div>Polygon area: <div>{Math.round(props.polygonArea)}px</div></div>\r\n                <div>Common area: <div>{props.interArea}px</div></div>\r\n            </div>\r\n        </div>)\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        circleArea: getCircleArea(state),\r\n        polygonArea: getPolygonArea(state),\r\n        interArea: getInterArea(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {clearCircle, clearPolygon})(Panel);","import React, {useState} from \"react\";\r\nimport {addPolygonPoint, setCircleCenter, setCircleRadius,} from \"../Redux/mapReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst SVG = (props) => {\r\n\r\n    const [mouseCoords, setMouseCoords] = useState({x: 0, y: 0});\r\n    const [tempPolygonPoint, setTempPolygonPoint] = useState({x: 0, y: 0});\r\n\r\n    let polygonCoords = props.polygon.points.reduce((acc, el) => {\r\n        acc.push(`${el.x},${el.y}`);\r\n        return acc;\r\n    }, []);\r\n\r\n    if (props.drawMode === props.drawModes.SET_POLYGON_POINT) {\r\n        polygonCoords.push(`${tempPolygonPoint.x},${tempPolygonPoint.y}`);\r\n    }\r\n\r\n    const onMouseMove = (e) => {\r\n        setMouseCoords({x: e.clientX, y: e.clientY});\r\n        if (props.drawMode === props.drawModes.SET_CIRCLE_RADIUS) {\r\n            let x = props.circle.center.x;\r\n            let y = props.circle.center.y;\r\n            let maxRadius = Math.min.apply(null, [x, y, props.mapSize.width - x, props.mapSize.height - y]);\r\n            const radius = Math.sqrt((mouseCoords.x - x) ** 2 + (mouseCoords.y - y) ** 2);\r\n            props.setCircleRadius(radius > maxRadius ? maxRadius : radius);\r\n        } else if (props.drawMode === props.drawModes.SET_POLYGON_POINT) {\r\n            setTempPolygonPoint({x: e.clientX, y: e.clientY})\r\n        }\r\n    };\r\n\r\n    const onMapClick = (e) => {\r\n        switch (props.drawMode) {\r\n            case props.drawModes.SET_CIRCLE_CENTER: {\r\n                props.setCircleCenter(e.clientX, e.clientY);\r\n                props.setDrawMode(props.drawModes.SET_CIRCLE_RADIUS);\r\n                break\r\n            }\r\n            case props.drawModes.SET_CIRCLE_RADIUS: {\r\n                props.setDrawMode(props.drawModes.OFF);\r\n                break\r\n            }\r\n            case props.drawModes.SET_POLYGON_POINT: {\r\n                props.addPolygonPoint({x: e.clientX, y: e.clientY});\r\n                break\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const stopDrawing = (e) => {\r\n        e.stopPropagation();\r\n        props.setDrawMode(props.drawModes.OFF);\r\n    };\r\n\r\n    return (\r\n        <svg width={`${props.mapSize.width}px`} height={`${props.mapSize.height - 4}px`} onClick={onMapClick}\r\n             onMouseMove={onMouseMove}>\r\n\r\n            <circle className='circle' cx={props.circle.center.x} cy={props.circle.center.y} r={props.circle.radius}\r\n                    style={{...props.drawMode === props.drawModes.SET_CIRCLE_RADIUS && {strokeDasharray: \"4\"}}}/>\r\n            {props.drawMode === props.drawModes.SET_CIRCLE_RADIUS &&\r\n            <text x={mouseCoords.x + 20} y={mouseCoords.y + 20}>r = {Math.round(props.circle.radius)}</text>}\r\n\r\n            <polygon className='polygon' points={polygonCoords.join(' ')} style={\r\n                {...props.drawMode === props.drawModes.SET_POLYGON_POINT && {strokeDasharray: \"4\"}}}/>\r\n\r\n            {props.polygon.points[2] && props.drawMode === props.drawModes.SET_POLYGON_POINT &&\r\n            <circle onClick={stopDrawing} cx={props.polygon.points[0].x} cy={props.polygon.points[0].y} r={7}\r\n                    style={{fill: \"red\", fillOpacity: \"0.8\", cursor: 'pointer'}}/>}\r\n\r\n        </svg>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        mapSize: state.map.mapSize,\r\n        circle: state.map.circle,\r\n        polygon: state.map.polygon\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {setCircleRadius, setCircleCenter, addPolygonPoint})(SVG);","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Panel from \"./Panel\";\r\nimport SVG from \"./SVG\";\r\n\r\nconst drawModes = {\r\n    OFF: 'OFF',\r\n    SET_CIRCLE_CENTER: 'SET_CIRCLE_CENTER',\r\n    SET_CIRCLE_RADIUS: 'SET_CIRCLE_RADIUS',\r\n    SET_POLYGON_POINT: 'SET_POLYGON_POINT',\r\n};\r\n\r\nfunction Map(props) {\r\n\r\n    const [drawMode, setDrawMode] = useState(drawModes.OFF);\r\n\r\n    return (\r\n        <div className=\"map\" style={{width: `${props.mapSize.width}px`, height: `${props.mapSize.height}px`}}>\r\n\r\n            <Panel drawModes={drawModes} drawMode={drawMode} setDrawMode={setDrawMode}/>\r\n\r\n            <SVG drawModes={drawModes} drawMode={drawMode} setDrawMode={setDrawMode}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        mapSize: state.map.mapSize,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Map);\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Map from \"./React/Map\";\r\nimport {connect} from \"react-redux\";\r\nimport {setMapSize} from \"./Redux/mapReducer\";\r\n\r\nfunction App(props) {\r\n\r\n    props.setMapSize({width: window.innerWidth, height: window.innerHeight});\r\n\r\n    let handleResize = () => {\r\n        props.setMapSize({width: window.innerWidth, height: window.innerHeight});\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Map/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(null, {setMapSize})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {createStore} from \"redux\";\r\nimport {combineReducers} from \"redux/es/redux\";\r\nimport mapReducer from \"./mapReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    map: mapReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Redux/redux-store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}